/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mydbmanager;

import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mitrajit
 */
public class StockEntry extends javax.swing.JFrame {

    /**
     * Creates new form StockEntry
     */
    Connection conn=null;
    PreparedStatement pst=null;
    ResultSet rs=null;
    public StockEntry() {
        initComponents();
        try{
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            conn=DriverManager.getConnection("jdbc:ucanaccess://E:\\Data entry_Project\\Mydb.accdb");
//            jScrollPane2.setVisible(false);
//            Dimension dim= new Dimension(697,301);
//            this.setSize(dim);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Problem in connection");
        }
    }
    ArrayList<JFrame> frames=null;
    public StockEntry(Connection con,ArrayList<JFrame> frm) {
        initComponents();
        conn=con;
        frames=frm;
    }
    public int quantifier(Object qdz,Object qpc)
    {
        int quantity= (Integer.valueOf(qdz.toString())*12+Integer.parseInt(qpc.toString()));
        return quantity;
    }
    public void quantifier(int quantity)
    {
        qut.setValue(quantity/12);
        qutpc.setValue(quantity-(quantity/12)*12);
    }
    private void autofill(String text,javax.swing.JTextField txt)
    {
        int start = txt.getText().length();
        int last = start;
        //boolean found=false;
        try{
            String sql="SELECT * FROM Stock WHERE ["+text+"] LIKE '"+txt.getText()+"*'";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        if(rs.next())
        {
            txt.setText(rs.getString(text));
            last=rs.getString(text).length();
            //found=true;
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);}
        if(start<last)
        {
            txt.setCaretPosition(last);
            txt.moveCaretPosition(start);
        }  
        //return found;
    }
    public String Format(double a){
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMaximumFractionDigits(2);
        nf.setMinimumFractionDigits(2);
        nf.setGroupingUsed(false);
        return nf.format(a);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputcompo = new javax.swing.JPanel();
        delete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        qut = new javax.swing.JSpinner();
        Unit = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        mrp = new javax.swing.JFormattedTextField();
        sp = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        grpname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cp = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        qutpc = new javax.swing.JSpinner();
        minsp = new javax.swing.JFormattedTextField();
        itemname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stocktable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stock management");
        setIconImage(ScaleImage.scale("Billosoft.png", 96, 96).getImage());
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        delete.setText("Delete");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity");

        jLabel11.setText("(optional)");

        qut.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        Unit.setEditable(false);
        Unit.setText("DOZ");

        jTextField1.setEditable(false);
        jTextField1.setText("PCS");

        add.setText("Add Item");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel6.setText("Min. sell price");

        description.setColumns(10);
        description.setRows(3);
        jScrollPane1.setViewportView(description);

        jLabel7.setText("M.R.P");

        mrp.setText("0.00");
        mrp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mrpFocusLost(evt);
            }
        });
        mrp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mrpMouseClicked(evt);
            }
        });

        sp.setText("0.00");
        sp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                spFocusLost(evt);
            }
        });
        sp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spMouseClicked(evt);
            }
        });

        jLabel10.setText("Description");

        grpname.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        grpname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                grpnameKeyPressed(evt);
            }
        });

        jLabel2.setText("Cost price");

        cp.setText("0.00");
        cp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cpFocusLost(evt);
            }
        });
        cp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cpMouseClicked(evt);
            }
        });

        jLabel15.setText("-");

        update.setText("Update");
        update.setEnabled(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel8.setText("Group name");

        qutpc.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        minsp.setText("0.00");
        minsp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minspFocusLost(evt);
            }
        });
        minsp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minspMouseClicked(evt);
            }
        });

        itemname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                itemnameFocusLost(evt);
            }
        });
        itemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemnameKeyPressed(evt);
            }
        });

        jLabel5.setText("Selling Price");

        jLabel1.setText("Item name");

        javax.swing.GroupLayout inputcompoLayout = new javax.swing.GroupLayout(inputcompo);
        inputcompo.setLayout(inputcompoLayout);
        inputcompoLayout.setHorizontalGroup(
            inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputcompoLayout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(inputcompoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8)
                        .addComponent(jLabel1)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11))
                    .addGap(18, 18, 18)
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(grpname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(itemname, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(inputcompoLayout.createSequentialGroup()
                            .addGap(57, 57, 57)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(qut))
                        .addGroup(inputcompoLayout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputcompoLayout.createSequentialGroup()
                                    .addGap(16, 16, 16)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cp, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputcompoLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(minsp, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(inputcompoLayout.createSequentialGroup()
                            .addComponent(Unit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(qutpc)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(inputcompoLayout.createSequentialGroup()
                            .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addGroup(inputcompoLayout.createSequentialGroup()
                                    .addGap(27, 27, 27)
                                    .addComponent(jLabel7)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                .addComponent(mrp))))
                    .addContainerGap()))
        );
        inputcompoLayout.setVerticalGroup(
            inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputcompoLayout.createSequentialGroup()
                .addContainerGap(144, Short.MAX_VALUE)
                .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(delete)
                    .addComponent(update))
                .addContainerGap())
            .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(inputcompoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(sp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel8)
                        .addComponent(grpname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minsp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(mrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel1))
                    .addGap(18, 18, 18)
                    .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(inputcompoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(qut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Unit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qutpc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGroup(inputcompoLayout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addGap(1, 1, 1)
                            .addComponent(jLabel11)))
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Group", "Item", "Selling price", "Min. selling price", "MRP", "Quantity available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stocktable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stocktableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(stocktable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inputcompo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(inputcompo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cpMouseClicked
        // TODO add your handling code here:
        if(cp.getText().equals("0.00")){
            cp.setCaretPosition(cp.getText().length());
            cp.moveCaretPosition(0);}
    }//GEN-LAST:event_cpMouseClicked

    private void spMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spMouseClicked
        if(sp.getText().equals("0.00")){
            sp.setCaretPosition(sp.getText().length());
            sp.moveCaretPosition(0);}
    }//GEN-LAST:event_spMouseClicked

    private void grpnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grpnameKeyPressed
        // TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_BACK_SPACE:
            break;
            case KeyEvent.VK_ENTER:
            grpname.setText(grpname.getText());
            break;
            default:
            if((evt.getKeyCode()>=48&&evt.getKeyCode()<=57)||(evt.getKeyCode()>='A'&&evt.getKeyCode()<='Z')||(evt.getKeyCode()>='a'&&evt.getKeyCode()<='z')||evt.getKeyChar()==' ')
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                      autofill("Group",grpname);
                }
            });

        }
    }//GEN-LAST:event_grpnameKeyPressed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        if(add.getText().equals("Add Item")){
            if(!itemname.getText().equals("")){
        String sql="INSERT INTO Stock ([Group],Item,Cost_price,Selling_price,Minsell_price,MRP,Qut_available,Unit,Description) VALUES('"+
                grpname.getText()+"','"+itemname.getText()+"','"+Double.parseDouble(cp.getText())+"','"+Double.parseDouble(sp.getText())+"','"+
                Double.parseDouble(minsp.getText())+"','"+Double.parseDouble(mrp.getText())+"','"+quantifier(qut.getValue(), qutpc.getValue())+
                "','"+"PCS"+"','"+description.getText()+"')";
        try {
            if(conn.prepareStatement(sql).executeUpdate()==1){
                JOptionPane.showMessageDialog(null, "New Item added to stock");
                reset();
                fillstocktable();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }}}
        else
        {
            if(found()){
            try{
                rs=conn.prepareStatement("SELECT * FROM Stock WHERE Item='"+itemname.getText()+"'").executeQuery();
                rs.next();
                String sql="UPDATE Stock SET Qut_available='"+(rs.getInt("Qut_available")+quantifier(qut.getValue(), qutpc.getValue()))+"' WHERE Item='"+itemname.getText()+"'";
                if(conn.prepareStatement(sql).executeUpdate()==1){
                JOptionPane.showMessageDialog(this, "Item added to stock");
                reset();
                fillstocktable();
            }
            }
            catch(Exception e){JOptionPane.showMessageDialog(this, e);}}
            else
                JOptionPane.showMessageDialog(this, "Item not found");
        }
    }//GEN-LAST:event_addActionPerformed

    private void cpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cpFocusLost
        // TODO add your handling code here:
        cp.setText(Format(Double.parseDouble(cp.getText())));
    }//GEN-LAST:event_cpFocusLost

    private void minspMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minspMouseClicked
        if(minsp.getText().equals("0.00")){
            minsp.setCaretPosition(minsp.getText().length());
            minsp.moveCaretPosition(0);}
    }//GEN-LAST:event_minspMouseClicked

    private void mrpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mrpMouseClicked
        if(mrp.getText().equals("0.00")){
            mrp.setCaretPosition(mrp.getText().length());
            mrp.moveCaretPosition(0);}
    }//GEN-LAST:event_mrpMouseClicked

    private void spFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_spFocusLost
        sp.setText(Format(Double.parseDouble(sp.getText())));
    }//GEN-LAST:event_spFocusLost

    private void minspFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minspFocusLost
        minsp.setText(Format(Double.parseDouble(minsp.getText())));
    }//GEN-LAST:event_minspFocusLost

    private void mrpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mrpFocusLost
        mrp.setText(Format(Double.parseDouble(mrp.getText())));
    }//GEN-LAST:event_mrpFocusLost

    public void fill()
    {
        try{
        String sql="SELECT * FROM Stock WHERE Item='"+itemname.getText()+"'";
        rs=conn.prepareStatement(sql).executeQuery();
        //[Group],Item,Cost_price,Selling_price,Minsell_price,MRP,Qut_available,Unit,Instock_amt,Description
        if(rs.next()){
        grpname.setText(rs.getString("Group"));
        itemname.setText(rs.getString("Item"));
        description.setText(rs.getString("Description"));
        cp.setText(Format(rs.getDouble("Cost_price")));
        sp.setText(Format(rs.getDouble("Selling_price")));
        minsp.setText(Format(rs.getDouble("Minsell_price")));
        mrp.setText(Format(rs.getDouble("MRP")));
        if(add.getText().equals("Add Item"))
            quantifier(rs.getInt("Qut_available"));
        else
            quantifier(0);
        }}
        catch(Exception e){JOptionPane.showMessageDialog(null, e);}
    }
    private void itemnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemnameKeyPressed
        // TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_ENTER:
            itemname.setText(itemname.getText());
            if(found())
            {    
                fill();
                if(this.getTitle().equals("Stock management")){
                update.setEnabled(true);
                delete.setEnabled(true);
                add.setEnabled(false);}
            }
            else
            {
                if(this.getTitle().equals("Stock management")){
                    update.setEnabled(false);
                    delete.setEnabled(false);
                    add.setEnabled(true);}
            }
            break;
            default:
            if((evt.getKeyCode()>=48&&evt.getKeyCode()<=57)||(evt.getKeyCode()>='A'&&evt.getKeyCode()<='Z')||(evt.getKeyCode()>='a'&&evt.getKeyCode()<='z')||evt.getKeyChar()==' ')
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                      autofill("Item",itemname);
                }
            });
        }
    }//GEN-LAST:event_itemnameKeyPressed

    private void itemnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemnameFocusLost
        // TODO add your handling code here:
        if(found())
        {
            fill();
            if(this.getTitle().equals("Stock management")){
            update.setEnabled(true);
            delete.setEnabled(true);
            add.setEnabled(false);}
        }
        else
        {
            if(this.getTitle().equals("Stock management")){
            update.setEnabled(false);
            delete.setEnabled(false);
            add.setEnabled(true);}
        }
    }//GEN-LAST:event_itemnameFocusLost

    public void reset()
    {
        itemname.setText("");
        grpname.setText("");
        description.setText("");
        cp.setText("0.00");
        sp.setText("0.00");
        minsp.setText("0.00");
        mrp.setText("0.00");
        qut.setValue(0);
        qutpc.setValue(0);
    }
    private boolean found()
    {
        try{
        String sql="SELECT * FROM Stock WHERE Item ='"+itemname.getText()+"'";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        return ( rs.next() );
        }
        catch(Exception e)
        {
                    JOptionPane.showMessageDialog(null, e);
                    return false;
        }
    }
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        if(found()){ 
        String sql="UPDATE Stock SET [Group] ='"+grpname.getText()+"',Cost_price ='"+Double.parseDouble(cp.getText())+"', Selling_price ='"
                 +Double.parseDouble(sp.getText())+"', Minsell_price ='"+Double.parseDouble(minsp.getText())+"',MRP ='"+
                 Double.parseDouble(mrp.getText())+"', Qut_available ='"+ quantifier(qut.getValue(), qutpc.getValue())+"',Unit= 'PCS',"
                 + "Description ='"+description.getText()+"' WHERE Item ='"+itemname.getText()+"'";
        try {
            if(conn.prepareStatement(sql).executeUpdate()==1){
                JOptionPane.showMessageDialog(null, "Item updated");
                reset();
                fillstocktable();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        }
        else
            JOptionPane.showMessageDialog(null, "Item name not found!");
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if(found()){ 
        String sql="DELETE FROM Stock WHERE Item ='"+itemname.getText()+"'";
        try {
            
            if(JOptionPane.showConfirmDialog(null, "Are you sure you want to delete "+itemname.getText()+" from stock list?", "Confirmation", JOptionPane.YES_NO_OPTION)==0)
            {
                if(conn.prepareStatement(sql).executeUpdate()==1){
                    JOptionPane.showMessageDialog(null, "Deleted succesfully");
                    reset();
                    fillstocktable();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }}
        else
            JOptionPane.showMessageDialog(null, "Item name not found!");
    }//GEN-LAST:event_deleteActionPerformed
    public void fillstocktable()
    {
        try{
        String sql="SELECT * FROM Stock";
        DefaultTableModel stocktm= (DefaultTableModel) stocktable.getModel();
        stocktm.setRowCount(0);
        //paytm.setColumnIdentifiers(new Object[]{"Customer Name","Address","City","Phone number","EmailId","DUE"});
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        while(rs.next()){
            stocktm.addRow(new Object[]{rs.getString("Group"),rs.getString("Item"),Format(rs.getDouble("Selling_price")),
                Format(rs.getDouble("Minsell_price")),Format(rs.getDouble("MRP")),
                (rs.getInt("Qut_available")/12)+"DOZ - "+(rs.getInt("Qut_available")-(rs.getInt("Qut_available")/12)*12)+"PCS"});
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        //filling up stock table when window is focused
        fillstocktable();
        if(frames.remove(this))
            frames.add(this);
        else
            frames.add(this);
    }//GEN-LAST:event_formWindowGainedFocus

    private void stocktableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stocktableMouseClicked
        itemname.setText((String) stocktable.getValueAt(stocktable.getSelectedRow(), 1));
        fill();
        update.setEnabled(true);
        delete.setEnabled(true);
        if(add.getText().equals("Add Item"))
            add.setEnabled(false);
        else
            add.setEnabled(true);
    }//GEN-LAST:event_stocktableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockEntry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Unit;
    public javax.swing.JButton add;
    private javax.swing.JFormattedTextField cp;
    public javax.swing.JButton delete;
    private javax.swing.JTextArea description;
    private javax.swing.JTextField grpname;
    private javax.swing.JPanel inputcompo;
    private javax.swing.JTextField itemname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JFormattedTextField minsp;
    private javax.swing.JFormattedTextField mrp;
    private javax.swing.JSpinner qut;
    private javax.swing.JSpinner qutpc;
    private javax.swing.JFormattedTextField sp;
    private javax.swing.JTable stocktable;
    public javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
